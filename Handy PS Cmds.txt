----Get the version of installed PowerShell----
$PSVersionTable.PSVersion

----Bypass the execution policy----
Set-ExecutionPolicy -ExecutionPolicy Bypass

----Get full system information----
systeminfo

----Get Workstation Serial Number of PC----
wmic bios get serialnumber

----Function to insert TimeStamp----
Function insertTimeStamp { return '[' + (Get-Date).ToString('yyyy-MM-dd HH:mm:ss') + '] : ' }	//use by (insertTimeStamp)

----Gain Powershell access to remote computer----

----Run 'winrm quickconfig' on the remote server once, that will be accessed later, to enable pshell remoting.----
psexec \\servername -u domain\username -p password cmd
winrm quickconfig
exit

----Connect using pshell remoting----
$SavedCred = Get-Credential -Credential domain\username
Enter-PSSession -ComputerName $RemoteServerName -Credential $SavedCred

----Copying files, Moving files----
Set-Location \\servername\sharename
Copy-Item \\servername1\sharename1\filename.ext \\servername2\sharename2
Remove-Item \\servername\sharename\foldername\filename.ext
Copy-Item C:\scripts c:\test -recurse		//copies 'scripts' folder in 'test' folder along with all contents.

----View VSS Writers and Providers----
vssadmin list writers
vssadmin list providers
vssadmin list shadows

----View current drive mappings----
net use

----View current admin shares----
net share

----Make new drive mappings----
net use Z: "\\path goes here" /PERSISTENT:YES
net use Z: "\\path goes here" $password /USER:$username /PERSISTENT:YES /SAVECRED	//to setup mapping with alternate account

----Remove drive mappings----
net use Z: /delete

----Get information on installed roles and features----
Get-WindowsFeature | Where-Object {$_.installstate -eq "installed"} | Format-List Name,Installstate | more

----Get current time sources----
net time

----Modify time sync source on PDC----
(TO BE USED ONLY ON PDC since they are sources for rest of the domain and subdomains)
w32tm /query /status			//shows current config
w32tm /config /syncfromflags:MANUAL /manualpeerlist:pool.ntp.org /reliable:YES		//modifies the sources
w32tm /config /update		//saves the changes

----Ping test and save timestamped output to a log file----
ping.exe -t google.com | Foreach{"{0} - {1}" -f ((Get-Date).ToString('yyyy-MM-dd HH:mm:ss') + ' : '),$_} >> C:\Scripts\pingOutput.log

----Delete a specific file extension recursively----
Get-ChildItem D:\folder -include *.tmp -recurse | foreach ($_) {remove-item $_.fullname}
Get-ChildItem D:\folder -Filter *.txt -Recurse | Remove-Item -WhatIf

----Pause exectuion of script of 5 secs----
Start-Sleep -s 5

----Get last bootime, time since last reboot----
Get-CimInstance -ClassName win32_operatingsystem | select csname, lastbootuptime

----Get windows update log----
Get-WindowsUpdateLog

----Get list of installed Windows updates KB----
wmic qfe list
wmic qfe list >> C:\Scripts\Installed_Patches.txt

----[[[[UNTESTED---Uninstall a windows update KB---UNTESTED]]]]----
wusa /uninstall /kb:$number

----get a list of all currently logged in users----
query user

----Get SQL Version----
Invoke-Sqlcmd -Query "SELECT @@VERSION;" -QueryTimeout 3
Invoke-SqlCmd -query "select @@version" -ServerInstance "localhost"

----Check Windows Activation Status----
slmgr /xpr			//expiration date
slmgr /dli			//display license infomation
slmgr /dlv			//display detailed license information
slmgr.vbs /rearm	//extends or reset activation timer
----Attempt Activation Using whichever key is installed----
slmgr.vbs /ato

----Check which  KMS server is being attempted for activation----
nslookup -type=srv _vlmcs._tcp

----Manually assign a KMS host to a client----
slmgr.vbs /skms <value>:<port>
slmgr.vbs /skms kms.core.windows.net:1688

----Install Azure PowerShell Module----
Install-Module -Name AzureRM -AllowClobber

----Connect to Azure PowerShell----
Import-Module AzureRM
Connect-AzureRmAccount

----Degragment all drives----
defrag /c /v >> C:\Scripts\defragOutput.log

----Set a VPN connection to split Tunnel----
Get-VpnConnection
Set-VpnConnection -Name "RMGVPN" -SplitTunneling $true

----Test SMTP email settings----
Send-MailMessage –From user@aquaticachievers.com.au –To muhammad.majid@manganoit.com.au –Subject “Test Email” –Body “Test SMTP Relay Service” -SmtpServer aquaticachievers-com-au.mail.protection.outlook.com
Send-MailMessage –From blue.apache@stjohnqld.com.au –To muhammad.majid@blueapache.com –Subject “Test Email” –Body “Test SMTP Relay Service” -SmtpServer smtp.office365.com

----Add User to Remote Desktop Users Group via PowerShell----
Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username 

----Remove User from Remote Desktop Users Group via PowerShell----
Remove-LocalGroupMember -Group "Remote Desktop Users" -Member $username

----Copy / Mirror all contents of a directory to another creating destination if doesn't exist----
Robocopy 'C:\Rocket Software.bkp_20190611' 'C:\Rocket Software' /MIR

----Grant local administrator rights to a User----
net localgroup administrators $username /add
net localgroup "Remote desktop users" $username /add

----Remove local administrator rights from User----
net localgroup administrators $username /delete
net localgroup "Remote desktop users" $username /delete

----Generate random password----
Add-Type -AssemblyName System.Web	//assembly to use
$Password = "Welcome" + [system.web.security.membership]::GeneratePassword(x,y)	//x = length in characters, y = minimum number of non-alphanumeric characters
$SecurePass = $Password | ConvertTo-SecureString -AsPlainText -Force	//secure password object


