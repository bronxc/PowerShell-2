----Get the version of installed PowerShell----
$PSVersionTable.PSVersion

----Bypass the execution policy----
Set-ExecutionPolicy -ExecutionPolicy Bypass

----Get full system information----
systeminfo

----Get last bootime, time since last reboot----
Get-CimInstance -ClassName win32_operatingsystem | select csname, lastbootuptime
Systeminfo | find "System Boot Time"		//command prompt

----Get last logon time on a local workstation----
quser

----Get Workstation Serial Number of PC----
wmic bios get serialnumber

----Check if Harddisk is SSD----
Get-PhysicalDisk

----Function to insert TimeStamp----
Function insertTimeStamp { return '[' + (Get-Date).ToString('yyyy-MM-dd HH:mm:ss') + '] : ' }	//use by (insertTimeStamp)

----Gain Powershell access to remote computer----
A. psexec \\servername -u domain\username -p password cmd
B.1 Run 'winrm quickconfig' on the remote server once, that will be accessed later, to enable pshell remoting.
B.2 winrm quickconfig
B.3 $SavedCred = Get-Credential -Credential domain\username
B.4 Enter-PSSession -ComputerName $RemoteServerName -Credential $SavedCred

----output to HTML----
| ConvertTo-Html | Out-File .\outputFileName.html

----output to CSV----
| Export-CSV .\outputFileName.csv -noTypeInformation

----Copying files, Moving files----
Set-Location \\servername\sharename
Copy-Item \\servername1\sharename1\filename.ext \\servername2\sharename2
Remove-Item \\servername\sharename\foldername\filename.ext
Copy-Item C:\scripts c:\test -recurse		//copies 'scripts' folder in 'test' folder along with all contents.

----View VSS Writers and Providers----
vssadmin list writers
vssadmin list providers
vssadmin list shadows

----View current drive mappings----
net use

----View current admin shares----
net share

----Make new drive mappings----
net use Z: "\\path goes here" /PERSISTENT:YES
net use Z: "\\path goes here" $password /USER:$username /PERSISTENT:YES /SAVECRED	//to setup mapping with alternate account

----Remove drive mappings----
net use Z: /delete

----Get information on installed roles and features----
Get-WindowsFeature | Where-Object {$_.installstate -eq "installed"} | Format-List Name,Installstate | more

----Get current time sources----
net time

----Modify time sync source on PDC----
(TO BE USED ONLY ON PDC since they are sources for rest of the domain and subdomains)
w32tm /query /status			//shows current config
w32tm /config /syncfromflags:MANUAL /manualpeerlist:pool.ntp.org /reliable:YES		//modifies the sources
w32tm /config /update		//saves the changes

----Ping test and save timestamped output to a log file----
ping.exe -t google.com | Foreach{"{0} - {1}" -f ((Get-Date).ToString('yyyy-MM-dd HH:mm:ss') + ' : '),$_} >> C:\Scripts\pingOutput.log
ping.exe -t google.com | Foreach{"{0} - {1}" -f ((Get-Date).ToString('yyyy-MM-dd HH:mm:ss') + ' : '),$_} >> C:\Scripts\pingOutput_$((Get-Date).ToString('yyyyMMddHHmmss')).log

----Delete a specific file extension recursively----
Get-ChildItem D:\folder -include *.tmp -recurse | foreach ($_) {remove-item $_.fullname}
Get-ChildItem D:\folder -Filter *.txt -Recurse | Remove-Item -WhatIf

----Delete Files and Folders Superfast----
Say you want to delete folder ABC with full path C:\1\2\3\ABC\*
1. Command prompt into ABC
2. from within ABC -> C:\1\2\3\ABC> DEL /F/Q/S *.* > NUL		//deletes all files in current and all subfolders recursively
3. do cd.. to go to parent (3) -> C:\1\2\3> RMDIR /Q/S "ABC"	//deletes all folders and subfolders recursively

----Pause exectuion of script of 5 secs----
Start-Sleep -s 5

----Get windows update log----
Get-WindowsUpdateLog

----Get list of installed Windows updates KB----
wmic qfe list
wmic qfe list >> C:\Scripts\Installed_Patches.txt

----[[[[UNTESTED---Uninstall a windows update KB---UNTESTED]]]]----
wusa /uninstall /kb:$number

----get a list of all currently logged in users----
query user

----Get SQL Version----
Invoke-Sqlcmd -Query "SELECT @@VERSION;" -QueryTimeout 3
Invoke-SqlCmd -query "select @@version" -ServerInstance "localhost"

----Check Windows Activation Status----
slmgr /xpr			//expiration date
slmgr /dli			//display license infomation
slmgr /dlv			//display detailed license information
slmgr /rearm		//extends or reset activation timer
wmic path SoftwareLicensingService get OA3xOriginalProductKey	//get existing product key
slmgr /upk			// uninstall product key. Key still remain in registry available if needed.
slmgr /ipk [#####-#####-#####-#####-#####] 		//installed product key
slmgr /cpky			// clear product key from registry. Product still stays activated, use slmgr /upk for uninstall.


----Attempt Activation Using whichever key is installed----
slmgr.vbs /ato

----Check which KMS server is being attempted for activation----
nslookup -type=srv _vlmcs._tcp

----Manually assign a KMS host to a client----
slmgr.vbs /skms <value>:<port>
slmgr.vbs /skms kms.core.windows.net:1688

----Install Azure PowerShell Module----
Install-Module -Name AzureRM -AllowClobber

----Connect to Azure PowerShell----
Import-Module AzureRM
Connect-AzureRmAccount

----Degragment all drives----
defrag /c /v >> C:\Scripts\defragOutput.log

----Set a VPN connection to split Tunnel----
Get-VpnConnection
Set-VpnConnection -Name "RMGVPN" -SplitTunneling $true

----Test SMTP email settings----
Send-MailMessage –From user@aquaticachievers.com.au –To muhammad.majid@manganoit.com.au –Subject “Test Email” –Body “Test SMTP Relay Service” -SmtpServer aquaticachievers-com-au.mail.protection.outlook.com
Send-MailMessage –From blue.apache@stjohnqld.com.au –To muhammad.majid@blueapache.com –Subject “Test Email” –Body “Test SMTP Relay Service” -SmtpServer smtp.office365.com

----Add local user via PowerShell----
net user $username /add

----Add User to Remote Desktop Users Group via PowerShell----
Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username 

----Remove User from Remote Desktop Users Group via PowerShell----
Remove-LocalGroupMember -Group "Remote Desktop Users" -Member $username

----Copy / Mirror all contents of a directory to another creating destination if doesn't exist----
Robocopy 'C:\Rocket Software.bkp_20190611' 'C:\Rocket Software' /MIR

----Grant local administrator rights to a User----
net localgroup administrators $username /add
net localgroup "Remote desktop users" $username /add
runas /user:Administrator@DOMAIN "net localgroup Administrators DOMAIN\username /add"		runas admin to do it within user session

----Remove local administrator rights from User----
net localgroup administrators $username /delete
net localgroup "Remote desktop users" $username /delete

----Generate random password----
Add-Type -AssemblyName System.Web	//assembly to use
$Password = "Welcome" + [system.web.security.membership]::GeneratePassword(x,y)	//x = length in characters, y = minimum number of non-alphanumeric characters
$SecurePass = $Password | ConvertTo-SecureString -AsPlainText -Force	//secure password object

----Take Ownership of Folder recursively----
TAKEOWN /F "Full-FolderPath" /R /A			/R for recursive, /A for administrators group (instead of current user)
icacls "full path of folder or drive" /setowner "$domain\username" /T /C

----Grant full access to folders, subfolders and files recursively----
icacls "Full-Folder-Path" /grant $username:F /t

----Backup ACL permissions of a folder recursively----
icacls "full path of folder" /save $filename.txt /t /c

----Restore ACL permissions backed up earlier----
icacls "full path of folder" /restore $filename.txt

----Enable/Disable Hardware Device----
Get-PnpDevice -FriendlyName *$deviceName* | ft -wrap -autosize friendlyname, instanceid		//returns instanceID of device.
Disable-PnpDevice -InstanceId "PCI\VEN_8086&DEV_0166&SUBSYS_17F4103C&REV_09\3&B1BFB68&0&10" -confirm:$false
Enable-PnpDevice -InstanceId "PCI\VEN_8086&DEV_0166&SUBSYS_17F4103C&REV_09\3&B1BFB68&0&10" -confirm:$false

----Run group policy report----
GPRESULT /H C:\Scripts\GPReport.html
GPRESULT /USER $targetusername /H C:\Scripts\GPReport.html

----Trace Route to a perticular website or IP----
tracert $webSiteURL-or-IP

----Kill a task----
tasklist
taskkill /IM outlook.exe /f

----Check Citrix Server's Stats----
Get-BrokerMachine | Select DNSName, LoadIndex, LoadIndexes, SessionCount, SessionsPending | ft

----Check available editions in install.ese, install.wim or install.swm file----
dism /Get-WimInfo /WimFile:F:\sources\install.esd
or use 7zip to open the above file and look into [1].xml

----Copy files from remote linux machine to local---
pscp.exe pi@Mj-VPNPI:/home/pi/configs/* 'C:\Users\Mj\Dropbox\Configurations\WireGuard_Profiles'

----Get my Public IP---
A. (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
B. Invoke-RestMethod http://ipinfo.io/json | Select -exp ip
C. $ipinfo = Invoke-RestMethod http://ipinfo.io/json
$ipinfo.ip
$ipinfo.hostname
$ipinfo.city
$ipinfo.region
$ipinfo.country
$ipinfo.loc
$ipinfo.org

----Run Chrome with a Different Dir to store user data---
"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --user-data-dir="Dir_Path_Here"
work well by creating a shortcut to chrome and adding [--user-data-dir="Dir_Path_Here] to the properties -> Target.

----Get ACL / Folder Permissions----
get-FolderACL.ps1 -path [-recurse] $folderPath | ConvertTo-Html | Out-File .\outputFileName.html
get-FolderACL.ps1 -path [-recurse] $folderPath | Export-CSV .\outputFileName.csv -noTypeInformation

----Get Index number of windwos version in install.esd or install.wim file----
Dism /Get-ImageInfo /imagefile:$driveLetter:\x64\sources\install.esd		// usually 6 for Win10 Pro
Dism /Get-ImageInfo /imagefile:$driveLetter:\x86\sources\install.esd

----regKey for WSD to IP----
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\SWD\DAFWSDProvider			//look for key: LocationInformation
